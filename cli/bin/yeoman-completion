#!/usr/bin/env node

var fs = require('fs');
var join = require('path').join;
var args = process.argv.slice(2);

var grunt = require('grunt');

grunt.task.init(['init:completion']);
grunt.task.loadTasks(join(__dirname, '../tasks/completion'));

// parse out the env
var env = parseEnv();

// not a completion command, completion.bash script triggers this file with `-- ...`
if(args[0] !== '--') {
  return fs.createReadStream(join(__dirname, '../tasks/completion/completion.sh')).pipe(process.stdout)
}

var last = env.last;
var parts = last.split(':').slice(0, -1);

// Bower commands have special semantic, and don't follow the grunt pattern.
// Same for the init command, goes through yeoman-generators.
var bowers = ['install', 'list', 'ls', 'uninstall', 'update', 'lookup', 'info', 'search'];
if(bowers.indexOf(env.words[0]) !== -1 || env.words[0] === 'init') {
  return complete(env.words[0], env);
}

// first word, list the top level completion helper, listing commands
if(!parts.length) {
  return complete('yeoman', env);
}


var helper = parts.join(':');
complete(helper, env);

// Function helpers, to go in lib/completion

function complete(name, env) {
  if(!grunt.task._helpers[name + ':completion']) return;
  grunt.task._helpers[name + ':completion'].call(env, env, function(err, results) {
    if(err) {
      // ignore err, not showing with completion
      console.error(err);
      return;
    }

    var prefix = name + ':';
    if(/yeoman|init/.test(name) || bowers.indexOf(name) !== -1) {
      prefix = '';
    }

    // special case, if helpers have setup the prefix on `env`
    prefix = env.prefix || prefix;
    log(results, env, prefix);
  });
}

function parseEnv(args) {
  args = args || process.argv.slice(2);

  var env = {
    args: args,
    point: +process.env.COMP_POINT,
    line: (process.env.COMP_LINE || '').replace(/yeoman\s?/, '')
  };

  env.partial = env.line.substr(0, env.point);
  env.words = env.line.split(' ');
  env.last = env.words.slice(-1).join('');
  env.lastPartial = env.partial.split(' ').slice(-1).join('');
  env.prev = env.words.slice(0, -1).slice(-1)[0];
  return env;
}

function log(arr, o, prefix) {
  prefix = prefix || '';
  arr = Array.isArray(arr) ? arr : [arr];
  arr = arr.map(function(v) {
    return prefix + v;
  });
  arr.filter(abbrev(o)).forEach(function(v) {
    console.log(v.replace(prefix, ''));
  });
}

function abbrev(o) { return function(it) {
  return new RegExp('^' + o.last).test(it);
}}
